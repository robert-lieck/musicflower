
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_webapp.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_webapp.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_webapp.py:


Web App Example
===============

This is a basic example for creating a MusicFlower web app with a custom visualiser.

.. GENERATED FROM PYTHON SOURCE LINES 9-13

Custom Visualiser
-----------------

Creating a web app with a custom visualiser is as easy as defining a single callback function

.. GENERATED FROM PYTHON SOURCE LINES 13-22

.. code-block:: Python


    import plotly.graph_objects as go

    def my_custom_visualiser(*, features, position, **kwargs):
        return go.Figure(data=[go.Bar(
            y=features[0][round(position * (len(features[0]) - 1))]
        )])









.. GENERATED FROM PYTHON SOURCE LINES 23-24

We can now register this function as a visualiser and start up the web app

.. GENERATED FROM PYTHON SOURCE LINES 24-33

.. code-block:: Python


    from musicflower.webapp import WebApp

    WebApp() \
        .use_chroma_features() \
        .register_visualiser('Chroma Bars', ['chroma-features'], my_custom_visualiser) \
        .init() \
        # .run()  # (uncomment this line!)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <musicflower.webapp.WebApp object at 0x7fd2aa80b2b0>



.. GENERATED FROM PYTHON SOURCE LINES 34-35

A slightly more elaborate version of the visualiser would be as follows

.. GENERATED FROM PYTHON SOURCE LINES 35-49

.. code-block:: Python


    from pitchtypes import EnharmonicPitchClass

    def my_custom_visualiser(*, features, position, **kwargs):
        features = WebApp.check_features(features)
        position = WebApp.position_idx(position, features=features)
        data = features[position]
        fig = go.Figure(data=[go.Bar(
            x=[str(EnharmonicPitchClass(i)) for i in range(12)],
            y=data
        )])
        fig.update_yaxes(range=[0, 1])
        return WebApp.update_figure_layout(fig)








.. GENERATED FROM PYTHON SOURCE LINES 50-51

And the app can be set up with additional parameters

.. GENERATED FROM PYTHON SOURCE LINES 51-60

.. code-block:: Python


    app = WebApp(verbose=True)  # print information about callbacks
    app.use_chroma_features(200)  # maximum time resolution
    app.register_visualiser('Chroma Bars', ['chroma-features'], my_custom_visualiser)
    app.init(
        figure_height=500,  # specify figure dimensions
        # audio_file="/path/to/initial/audio/file.mp3",  # audio file to load at start up
    )
    # app.run(debug=True)  # run app in debug mode (uncomment this line!)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    registered 'chroma-features' feature extractor
    registered 'Chroma Bars' visualiser
    initialised 'chroma-features' feature extractor
    initialised 'Chroma Bars' visualiser with callbacks for 'chroma-features'

    <musicflower.webapp.WebApp object at 0x7fd2a7e82c80>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.027 seconds)


.. _sphx_glr_download_auto_examples_plot_webapp.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_webapp.ipynb <plot_webapp.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_webapp.py <plot_webapp.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_webapp.zip <plot_webapp.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
